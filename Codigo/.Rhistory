sum(is.na(va))/(dim(va)[1]*dim(va)[2])
sum(is.na(switz))
dim(switz)
sum(is.na(switz))/(dim(switz)[1]*dim(sqitz)[2])
sum(is.na(hung))
dim(hung)
sum(is.na(hung))/(dim(hung)[1]*dim(hung)[2])
sum(is.na(va))
dim(va)
sum(is.na(va))/(dim(va)[1]*dim(va)[2])
sum(is.na(switz))
dim(switz)
sum(is.na(switz))/(dim(switz)[1]*dim(switz)[2])
summary(hung)
na.columns(hung)
hung[is.na(hung)]<- -9
na.columns(hung)
hung[is.na(hung)]<- -9
much.na.columns(hung,10)
hung[is.na(hung)]<- -9
much.na.cols(hung,10)
summary(va)
summary(switz)
clev2 <- read.table("../data/processed.cleveland.data", header=F, sep=',', na.strings="?")
summary(clev2)
rm.var <- c("V11", "V12", "V13")
hung <- hung[,!(names(hung) %in% rm.var)]
summary(hung)
hung <- read.table("../data/processed.hungarian.data", header=F, sep=',', na.strings="?")
summary(hung)
rm.var <- c("V11", "V12", "V13")
hung <- hung[,!(names(hung) %in% rm.var)]
var.imputable <- c("V4", "V5", "V6", "V7", "V8", "V9")
for (nom in var.imputable){
variable <- hung[, nom]
knn.imputation(hung, variable, nom, 7)
}
hung[is.na(hung)] <- -9
var.imputable <- c("V4", "V5", "V6", "V7", "V8", "V9")
for (nom in var.imputable){
hung[, nom][hung[, nom] == -9] <- NA
variable <- hung[, nom]
knn.imputation(hung, variable, nom, 7)
}
summary(hung)
hung[is.na(hung)] <- -9
var.imputable <- c("V4", "V5", "V6", "V7", "V8", "V9")
for (nom in var.imputable){
hung[, nom][hung[, nom] == -9] <- NA
variable <- hung[, nom]
knn.imputation(hung, variable, nom, 7)
}
summary(hung)
hung <- read.table("../data/processed.hungarian.data", header=F, sep=',', na.strings="?")
summary(hung)
rm.var <- c("V11", "V12", "V13")
hung <- hung[,!(names(hung) %in% rm.var)]
hung[is.na(hung)] <- -9
var.imputable <- c("V4", "V5", "V6", "V7", "V8", "V9")
for (nom in var.imputable){
hung[, nom][hung[, nom] == -9] <- NA
variable <- hung[, nom]
hung[, nom] <- knn.imputation(hung, variable, nom, 7)
}
summary(hung)
var.factor <- c("V2", "V3", "V6", "V7", "V9")
for (nom in var.factor){
hung[, nom] <- as.factor(as.character(hung[,nom]))
}
summary(hung)
var.factor <- c("V2", "V3", "V6", "V7", "V9", "V14")
for (nom in var.factor){
hung[, nom] <- as.factor(as.character(hung[,nom]))
}
summary(hung)
names_num <- c()
for(i in 1:ncol(hung)){
if (!is.factor(hung[,i])) {
names_num <- c(names_num, i)
}
}
hung_numeric <- hung[,names_num]
hung_cor <- cor(hung_numeric)
which(hung_cor > 0.5 & hung_cor < 1, arr.ind = TRUE)
which(-hung_cor > 0.5 & -hung_cor < 1, arr.ind = TRUE)
par(mfrow = c(2,3))
for(i in 1:length(hung_numeric)){
qqnorm(hung_numeric[,i], main = c("Q-Q Plot: ", names(hung_numeric)[i]))
qqline(hung_numeric[,i], col=2)
}
par(mfrow = c(2,3))
for(i in 1:length(hung_numeric)){
boxcox(lm(hung_numeric[,i]-min(hung_numeric[,i])+1e-6~1),lambda = seq(-1, 1.5, by=0.1), xlab = c(names(hung_numeric))[i])
}
hung[,"V10"] <- log(1+hung[,"V10"])
par(mfrow = c(2,3))
for(i in 1:length(hung_numeric)){
boxcox(lm(hung_numeric[,i]-min(hung_numeric[,i])+1e-6~1),lambda = seq(-1, 1.5, by=0.1), xlab = c(names(hung_numeric))[i])
}
qqplot(hung[,"V10"])
qqnorm(hung[,"V10"])
qqnorm(hung[,"V10"])
qqline(hung[,"V10"])
qqnorm(hung[,"V10"])
qqline(hung[,"V10"], col=2)
set.seed(2000)
n <- nrow(hung)
train.lenght <- round(2*n/3)
hung <- hung[sample(n),]
train <- hung[1:train.lenght,]
test <- hung[(train.lenght+1):n,]
names_num <- c()
for(i in 1:ncol(train)){
if (!is.factor(train[,i])) {
names_num <- c(names_num, i)
}
}
train_num <- train[,names_num]
pca <- princomp(train_num)
screeplot(pca)
summary(pca)
biplot(pca)
Fp <- pca$scores
Gs <- pca$loadings
Fs <- Fp %*% diag(1/pca$sdev)
Gp <- Gs %*% diag(pca$sdev) * 2
col.class <- as.numeric(train$V58)
col.class[col.class==1] <- "red"
col.class[col.class==2] <- "green"
col.class[col.class==3] <- "blue"
col.class[col.class==4] <- "yellow"
col.class[col.class==5] <- "purple"
plot(Fs[,1], Fs[,2], asp=1, col = col.class, xlab = "First principal component", ylab = "Second principal component")
arrows(rep(0,dim(Gs)[1]),rep(0,dim(Gs)[1]), Gp[,1], Gp[,2])
text(Gp[,1], Gp[,2], names(train_num), col = "black")
legend("bottomright", fill=c("red","green", "blue", "yellow", "purple"), legend=c('0','1','2','3', '4'))
Fp <- pca$scores
Gs <- pca$loadings
Fs <- Fp %*% diag(1/pca$sdev)
Gp <- Gs %*% diag(pca$sdev) * 2
col.class <- as.numeric(train$V14)
col.class[col.class==1] <- "red"
col.class[col.class==2] <- "green"
col.class[col.class==3] <- "blue"
col.class[col.class==4] <- "yellow"
col.class[col.class==5] <- "purple"
plot(Fs[,1], Fs[,2], asp=1, col = col.class, xlab = "First principal component", ylab = "Second principal component")
arrows(rep(0,dim(Gs)[1]),rep(0,dim(Gs)[1]), Gp[,1], Gp[,2])
text(Gp[,1], Gp[,2], names(train_num), col = "black")
legend("bottomright", fill=c("red","green", "blue", "yellow", "purple"), legend=c('0','1','2','3', '4'))
Fp <- pca$scores
Gs <- pca$loadings
Fs <- Fp %*% diag(1/pca$sdev)
Gp <- Gs %*% diag(pca$sdev) * 2
col.class <- as.numeric(train$V14)
col.class[col.class==0] <- "red"
col.class[col.class==1] <- "blue"
plot(Fs[,1], Fs[,2], asp=1, col = col.class, xlab = "First principal component", ylab = "Second principal component")
arrows(rep(0,dim(Gs)[1]),rep(0,dim(Gs)[1]), Gp[,1], Gp[,2])
text(Gp[,1], Gp[,2], names(train_num), col = "black")
legend("bottomright", fill=c("red","green", "blue", "yellow", "purple"), legend=c('0','1','2','3', '4'))
fda <- lda(V14~., data=train)
fda <- lda(V14~.-V14, data=train)
# Level 2 has only one value
hung$V19[hung$V19 == 2] <- 1
summary(hung)
# Level 2 has only one value
hung$V9[hung$V9 == 2] <- 1
hung$V9 <- droplevels(hung$V9)
levels(hung$V9)
fda <- lda(V14~., data=train)
summary(hung)
hung <- read.table("../data/processed.hungarian.data", header=F, sep=',', na.strings="?")
summary(hung)
rm.var <- c("V11", "V12", "V13")
hung <- hung[,!(names(hung) %in% rm.var)]
hung[is.na(hung)] <- -9
var.imputable <- c("V4", "V5", "V6", "V7", "V8", "V9")
for (nom in var.imputable){
hung[, nom][hung[, nom] == -9] <- NA
variable <- hung[, nom]
hung[, nom] <- knn.imputation(hung, variable, nom, 7)
}
var.factor <- c("V2", "V3", "V6", "V7", "V9", "V14")
for (nom in var.factor){
hung[, nom] <- as.factor(as.character(hung[,nom]))
}
summary(hung)
names_num <- c()
for(i in 1:ncol(hung)){
if (!is.factor(hung[,i])) {
names_num <- c(names_num, i)
}
}
hung_numeric <- hung[,names_num]
hung_cor <- cor(hung_numeric)
which(hung_cor > 0.5 & hung_cor < 1, arr.ind = TRUE)
which(-hung_cor > 0.5 & -hung_cor < 1, arr.ind = TRUE)
par(mfrow = c(2,3))
for(i in 1:length(hung_numeric)){
qqnorm(hung_numeric[,i], main = c("Q-Q Plot: ", names(hung_numeric)[i]))
qqline(hung_numeric[,i], col=2)
}
par(mfrow = c(2,3))
for(i in 1:length(hung_numeric)){
boxcox(lm(hung_numeric[,i]-min(hung_numeric[,i])+1e-6~1),lambda = seq(-1, 1.5, by=0.1), xlab = c(names(hung_numeric))[i])
}
hung[,"V10"] <- log(1+hung[,"V10"])
qqnorm(hung[,"V10"])
qqline(hung[,"V10"], col=2)
set.seed(2000)
n <- nrow(hung)
train.lenght <- round(2*n/3)
hung <- hung[sample(n),]
train <- hung[1:train.lenght,]
test <- hung[(train.lenght+1):n,]
names_num <- c()
for(i in 1:ncol(train)){
if (!is.factor(train[,i])) {
names_num <- c(names_num, i)
}
}
train_num <- train[,names_num]
pca <- princomp(train_num)
screeplot(pca)
summary(pca)
biplot(pca)
Fp <- pca$scores
Gs <- pca$loadings
Fs <- Fp %*% diag(1/pca$sdev)
Gp <- Gs %*% diag(pca$sdev) * 2
col.class <- as.numeric(train$V14)
col.class[col.class==0] <- "red"
col.class[col.class==1] <- "blue"
plot(Fs[,1], Fs[,2], asp=1, col = col.class, xlab = "First principal component", ylab = "Second principal component")
arrows(rep(0,dim(Gs)[1]),rep(0,dim(Gs)[1]), Gp[,1], Gp[,2])
text(Gp[,1], Gp[,2], names(train_num), col = "black")
legend("bottomright", fill=c("red","green", "blue", "yellow", "purple"), legend=c('0','1','2','3', '4'))
# Level 2 has only one value
hung$V7[hung$V7 == 2] <- 1
hung$V7 <- droplevels(hung$V7)
levels(hung$V7)
fda <- lda(V14~., data=train)
summary(hung)
# Level 2 has few values
hung$V7[hung$V7 == 2] <- 1
hung$V7 <- droplevels(hung$V7)
levels(hung$V7)
# Level 2 has one anomal value
hung$V9[hung$V9 == 2] <- 1
hung$V9 <- droplevels(hung$V9)
levels(hung$V9)
fda <- lda(V14~., data=train)
summary(hung)
set.seed(2000)
n <- nrow(hung)
train.lenght <- round(2*n/3)
hung <- hung[sample(n),]
train <- hung[1:train.lenght,]
test <- hung[(train.lenght+1):n,]
names_num <- c()
for(i in 1:ncol(train)){
if (!is.factor(train[,i])) {
names_num <- c(names_num, i)
}
}
train_num <- train[,names_num]
pca <- princomp(train_num)
screeplot(pca)
summary(pca)
biplot(pca)
Fp <- pca$scores
Gs <- pca$loadings
Fs <- Fp %*% diag(1/pca$sdev)
Gp <- Gs %*% diag(pca$sdev) * 2
col.class <- as.numeric(train$V14)
col.class[col.class==0] <- "red"
col.class[col.class==1] <- "blue"
plot(Fs[,1], Fs[,2], asp=1, col = col.class, xlab = "First principal component", ylab = "Second principal component")
arrows(rep(0,dim(Gs)[1]),rep(0,dim(Gs)[1]), Gp[,1], Gp[,2])
text(Gp[,1], Gp[,2], names(train_num), col = "black")
legend("bottomright", fill=c("red","green", "blue", "yellow", "purple"), legend=c('0','1','2','3', '4'))
fda <- lda(V14~., data=train)
#plot(fda)
loadings <- predict(fda)$x
plot(loadings, col = col.class)
legend("bottomright", fill=c("red","green", "blue", "yellow", "purple"), legend=c('0','1','2','3', '4'))
fda <- lda(V14~., data=train)
#plot(fda)
loadings <- predict(fda)$x
plot(loadings, col = col.class)
legend("bottomright", fill=c("red","blue"), legend=c('0','1'))
train$LD1 <- loadings[,1]
train$LD2 <- loadings[,2]
train$LD1 <- loadings[,1]
fda_test <- predict(fda, newdata = test)
test$LD1 <- fda_test$x[,1]
ac <- mjca(hung[,names(hung) %in% factores], lambda="Burt")
plot(ac, main="MCA biplot of Burt matrix with data")
ac_ind <- mjca(train[,names(train) %in% factores], lambda="indicator", reti = T)
plot(ac_ind$rowcoord, col = col.class)
legend("bottomright", fill=c("red","green", "blue", "yellow", "purple"), legend=c('0','1','2','3', '4'))
mca.features <- ac_ind$rowcoord
ac <- mjca(hung[,names(hung) %in% var.factor], lambda="Burt")
plot(ac, main="MCA biplot of Burt matrix with data")
ac_ind <- mjca(train[,names(train) %in% var.factor], lambda="indicator", reti = T)
plot(ac_ind$rowcoord, col = col.class)
legend("bottomright", fill=c("red","green", "blue", "yellow", "purple"), legend=c('0','1','2','3', '4'))
mca.features <- ac_ind$rowcoord
setwd("~/Desktop/CFIS segundo curso/AA1/Project/Images")
Fp <- pca$scores
Gs <- pca$loadings
Fs <- Fp %*% diag(1/pca$sdev)
Gp <- Gs %*% diag(pca$sdev)
col.class <- as.numeric(train$V14)
col.class[col.class==0] <- "red"
col.class[col.class==1] <- "blue"
plot(Fs[,1], Fs[,2], asp=1, col = col.class, xlab = "First principal component", ylab = "Second principal component")
arrows(rep(0,dim(Gs)[1]),rep(0,dim(Gs)[1]), Gp[,1], Gp[,2])
text(Gp[,1], Gp[,2], names(train_num), col = "black")
legend("bottomright", fill=c("red","green", "blue", "yellow", "purple"), legend=c('0','1','2','3', '4'))
Fp <- pca$scores
Gs <- pca$loadings
Fs <- Fp %*% diag(1/pca$sdev)
Gp <- Gs %*% diag(pca$sdev) *0.5
col.class <- as.numeric(train$V14)
col.class[col.class==0] <- "red"
col.class[col.class==1] <- "blue"
plot(Fs[,1], Fs[,2], asp=1, col = col.class, xlab = "First principal component", ylab = "Second principal component")
arrows(rep(0,dim(Gs)[1]),rep(0,dim(Gs)[1]), Gp[,1], Gp[,2])
text(Gp[,1], Gp[,2], names(train_num), col = "black")
legend("bottomright", fill=c("red","green", "blue", "yellow", "purple"), legend=c('0','1','2','3', '4'))
Fp <- pca$scores
Gs <- pca$loadings
Fs <- Fp %*% diag(1/pca$sdev)
Gp <- Gs %*% diag(pca$sdev) *0.3
col.class <- as.numeric(train$V14)
col.class[col.class==0] <- "red"
col.class[col.class==1] <- "blue"
plot(Fs[,1], Fs[,2], asp=1, col = col.class, xlab = "First principal component", ylab = "Second principal component")
arrows(rep(0,dim(Gs)[1]),rep(0,dim(Gs)[1]), Gp[,1], Gp[,2])
text(Gp[,1], Gp[,2], names(train_num), col = "black")
legend("bottomright", fill=c("red","green", "blue", "yellow", "purple"), legend=c('0','1','2','3', '4'))
Fp <- pca$scores
Gs <- pca$loadings
Fs <- Fp %*% diag(1/pca$sdev)
Gp <- Gs %*% diag(pca$sdev) *0.3
col.class <- as.numeric(train$V14)
col.class[col.class==0] <- "red"
col.class[col.class==1] <- "blue"
plot(Fs[,1], Fs[,2], asp=1, col = col.class, xlab = "First principal component", ylab = "Second principal component")
arrows(rep(0,dim(Gs)[1]),rep(0,dim(Gs)[1]), Gp[,1], Gp[,2])
text(Gp[,1], Gp[,2], names(train_num), col = "black")
legend("bottomright", fill=c("red","blue"), legend=c('0','1'))
hung2 <- read.table("../data/processed.hungarian.data", header=F, sep=',', na.strings="?")
sum(is.na(hung2))
sum(is.na(hung2))/(dim(hung2)[1]*dim(hung2)[2])
ac <- mjca(hung[,names(hung) %in% var.factor], lambda="Burt")
plot(ac, main="MCA biplot of Burt matrix with data")
ac_ind <- mjca(train[,names(train) %in% var.factor], lambda="indicator", reti = T)
plot(ac_ind$rowcoord, col = col.class)
legend("bottomright", fill=c("red","blue"), legend=c('0','1'))
mca.features <- ac_ind$rowcoord
par(mfrow = c(2,3))
for(i in 1:ncol(clev)){
if (!is.factor(clev[,i])) {
hist(clev[,i], main = names(clev)[i], xlab="Values")
}
}
set.seed(2105)
setwd("../data")
clev <- read.csv("cleveland.csv", header=F)
hung <- read.csv("hungarian.csv", header=F)
va <- read.csv("long-beach-va.csv", header=F)
switz <- read.csv("switzerland.csv", header=F)
clev$location <- "cleveland"
hung$location <- "hungarian"
va$location <- "long-beach-va"
switz$location <- "switzerland"
heart1 <- rbind(clev, hung)
heart2 <- rbind(va, switz)
heart <- rbind(heart1, heart2)
head(heart)
# It says which columns are all missings
# The index are returned in negative to eliminate them
na.columns <- function(dd){
rmlist <- c()
for (i in 1:ncol(dd)){
if (min(dd[,i]) == max(dd[,i]) & min(dd[,i])==-9){
rmlist <- c(rmlist, i)
}
}
-rmlist
}
clev <- clev[,na.columns(clev)]
# Returns columns with more NA than a given threshold, also in negative
much.na.cols <- function(dd, threshold){
rmlist <- c()
for (i in 1:ncol(dd)){
if (sum(dd[,i]==-9) > threshold){
rmlist <- c(rmlist, i)
}
}
-rmlist
}
clev <- clev[, much.na.cols(clev, 60)]
# Applies k-nearest neighbour imputation for a given variable
knn.imputation = function (dd, variable, varname, k)
{
aux = subset (dd, select = names(dd)[names(dd) != varname])
aux1 = aux[!is.na(variable),]
aux2 = aux[is.na(variable),]
# Neither of aux1, aux2 can contain NAs
knn.inc = knn (aux1,aux2, variable[!is.na(variable)], k)
variable[is.na(variable)] = knn.inc
variable
}
# This are the variables which values where substituted by dummy values.
dummy <- c("V1", "V2", "V36", "V69", "V70", "V71", "V72", "V73", "V28", "location")
clev <- clev[,!(names(clev) %in% dummy)]
# knn imputation for clev
na.names <- names(clev)[-much.na.cols(clev, 0)]
for (name in na.names){
clev[, name][clev[, name] == -9] <- NA
clev[, name] <- knn.imputation(clev, clev[,name], name, 7)
}
corr.factors <- cor(clev)
which(abs(corr.factors)-diag(diag(corr.factors))>0.9, arr.ind=T)
rm.correlated <- c("V57", "V55")
clev <- clev[,!(names(clev) %in% rm.correlated)]
factores <- c("V58", "V4", "V9", "V16", "V18", "V19", "V20", "V21", "V22", "V23", "V24", "V25", "V26", "V27", "V38", "V39", "V41", "V51", "V56", "V11", "V59", "V60", "V61", "V63", "V65", "V67", "V68")
for (f in factores){
clev[,f] <- as.factor(clev[,f])
}
# Dummy level gets replaced
clev$V25[clev$V25 == 2] <- 1
clev$V25 <- droplevels(clev$V25)
levels(clev$V25)
summary(clev)
par(mfrow = c(2,3))
for(i in 1:ncol(clev)){
if (!is.factor(clev[,i])) {
hist(clev[,i], main = names(clev)[i], xlab="Values")
}
}
par(mfrow = c(2,3))
for(i in 1:ncol(clev)){
if (!is.factor(clev[,i])) {
boxplot(clev[,i], xlab = names(clev)[i])
}
}
par(mfrow = c(3,3))
for(i in 1:ncol(clev)){
if (is.factor(clev[,i])) {
hist(as.numeric(as.character(clev[,i])), main = names(clev)[i], xlab="Values")
}
}
names_num <- c()
for(i in 1:ncol(clev)){
if (!is.factor(clev[,i])) {
names_num <- c(names_num, i)
}
}
clev_numeric <- clev[,names_num]
clev_cor <- cor(clev_numeric)
which(clev_cor > 0.5 & clev_cor < 1, arr.ind = TRUE)
which(-clev_cor > 0.5 & -clev_cor < 1, arr.ind = TRUE)
par(mfrow = c(2,3))
for(i in 1:length(clev_numeric)){
qqnorm(clev_numeric[,i], main = c("Q-Q Plot: ", names(clev_numeric)[i]))
qqline(clev_numeric[,i], col=2)
}
par(mfrow = c(2,3))
for(i in 1:length(clev_numeric)){
boxcox(lm(clev_numeric[,i]-min(clev_numeric[,i])+1e-6~1),lambda = seq(-1, 1.5, by=0.1), xlab = c(names(clev_numeric))[i])
}
par(mfrow = c(1,3))
#we treat them as special cases
aux <- clev_numeric[,"V14"]
aux <- aux[aux !=0]
boxcox(lm(aux~1),lambda = seq(-2, 1.5, by=0.1))
aux <- clev_numeric[,"V15"]
aux <- aux[aux !=0]
boxcox(lm(aux~1),lambda = seq(-2, 1.5, by=0.1))
aux <- clev_numeric[,"V40"]
aux <- aux[aux !=0]
boxcox(lm(aux~1),lambda = seq(-2, 1.5, by=0.1))
clev_sqrt <- c("V10", "V12", "V31", "V43")
clev_sqrt_especial <- c("V14", "V40")
clev_box <- clev_numeric
#box-cox transformation
for (i in 1:ncol(clev_box)){
if (names(clev_box)[i] %in% clev_sqrt) {
clev_box[,i] <- 2*sqrt(clev_box[,i]-min(clev_box[,i])+1e-6)
} else if (names(clev_box)[i] %in% clev_sqrt_especial){
clev_box[,i] <- 2*sqrt(clev_box[,i])
}
}
clev_box <- data.frame(scale(clev_box, scale = T)) #standarized
names(clev_box) <- names(clev_numeric)
clev_box$V14 <- clev_box$V14 - min(clev_box$V14)
clev_box$V15 <- clev_box$V15 - min(clev_box$V15)
clev_box$V40 <- clev_box$V40 - min(clev_box$V40)
par(mfrow = c(2,3))
for(i in 1:ncol(clev_box)){
qqnorm(clev_box[,i], main = c("Q-Q Plot: ", names(clev_box)[i]))
qqline(clev_box[,i], col=2)
}
clev_box <- apply(clev_box, 2, scale)
clev[, names(clev_box)] <- clev_box[,names(clev_box)]
summary(clev)
setwd("~/Desktop/CFIS segundo curso/AA1/Project/Codigo")
